" Dark powered mode of SpaceVim, generated by SpaceVim automatically.
let g:spacevim_enable_debug = 1
let g:spacevim_realtime_leader_guide = 1
call SpaceVim#layers#load('incsearch')
call SpaceVim#layers#load('lang#c')
call SpaceVim#layers#load('lang#elixir')
call SpaceVim#layers#load('lang#go')
call SpaceVim#layers#load('lang#haskell')
call SpaceVim#layers#load('lang#java')
call SpaceVim#layers#load('lang#javascript')
call SpaceVim#layers#load('lang#lua')
call SpaceVim#layers#load('lang#perl')
call SpaceVim#layers#load('lang#php')
call SpaceVim#layers#load('lang#python')
call SpaceVim#layers#load('lang#rust')
call SpaceVim#layers#load('lang#swig')
call SpaceVim#layers#load('lang#tmux')
call SpaceVim#layers#load('lang#vim')
call SpaceVim#layers#load('lang#xml')
call SpaceVim#layers#load('shell')   
call SpaceVim#layers#load('tools#screensaver')
let g:spacevim_enable_vimfiler_welcome = 1
let g:spacevim_enable_debug = 1
let g:deoplete#auto_complete_delay = 150
let g:spacevim_enable_tabline_filetype_icon = 1
let g:spacevim_enable_statusline_display_mode = 0
let g:spacevim_enable_os_fileformat_icon = 1
let g:spacevim_buffer_index_type = 1
let g:neomake_vim_enabled_makers = []
if executable('vimlint')
    call add(g:neomake_vim_enabled_makers, 'vimlint') 
endif
if executable('vint')
    call add(g:neomake_vim_enabled_makers, 'vint') 
endif
if has('python3')
    let g:ctrlp_map = ''
    nnoremap <silent> <C-p> :Denite file_rec<CR>
endif
let g:clang2_placeholder_next = ''
let g:clang2_placeholder_prev = ''


" Disabled rtags on windows gvim
let g:spacevim_disabled_plugins=[
\ ['lyuts/vim-rtags'],
\ ]

" best old-school natural mouse behavior with gvim
set mouse=a

" set no relative numbering
set nornu

" use fire as airline separator
let g:spacevim_statusline_separator = 'fire'

" remove audio and visual error bells and scroll bar
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=
set guioptions-=r

" use ascii characters instead of unicode for statusline
let g:spacevim_statusline_unicode_symbols = 0

" colorscheme
let g:spacevim_colorscheme = 'molokai'

"let g:spacevim_colorscheme_bg = 'dark'
" use special font for powerline (nerd-fonts)
let g:spacevim_guifont = 'DejaVuSansMono\ NF:h13'
let g:vimtweak_focus_transparency_gained_value = 7

" custom plugins
let g:spacevim_custom_plugins = [
\ ['mattn/vimtweak'],
\ ['mattn/transparency-windows-vim'],
\ ['jceb/vim-orgmode'],
\ ['vim-scripts/dbext.vim'],
\ ]

" stop bugging me with line length in python
let g:neomake_python_pep8_maker = {
    \ 'args': ['--ignore=E501,E221,E241,E272,E251,W702,E203,E201,E202',  '--format=default', '--max-line-length=1200'],
    \ 'errorformat':
        \ '%E%f:%l: could not compile,%-Z%p^,' .
        \ '%A%f:%l:%c: %t%n %m,' .
        \ '%A%f:%l: %t%n %m,' .
        \ '%-G%.%#',
    \ }

" use pep8 as a linter for python because it seems to be abundantly available
" with any distro of anaconda. disable warnings such as long lines and short names
let g:neomake_python_pylint_args = ['--ignore=E501,E221,E241,E272,E251,W702,E203,E201,E202',  '--format=default', '--max-line-length=1200']
let g:neomake_python_enabled_makers = ['pep8']

" still working on highlighting trailing whitespace
let g:better_whitespace_enabled = 1
let g:spacevim_buffer_index_type = 3

" the following combined with vimtweak enables semi transparent gvim
if &cp || (exists('g:loaded_transparency_windows_vim') && g:loaded_transparency_windows_vim)
  finish
endif

let g:loaded_transparency_windows_vim = 1

if !has('gui_running') || (!has('win32') && !has('win64'))
  finish
endif

let s:dll = get(g:, 'vimtweak_dll_path', '')
if empty(s:dll)
  let s:dll = get(split(globpath(&rtp, has('win64') ? 'vimtweak64.dll' : 'vimtweak32.dll'), '\n'), 0, '')
  if empty(s:dll)
    finish
  endif
endif

function! s:Transparency(v)
  call libcallnr(s:dll, 'SetAlpha', 255-a:v) 
endfunction

function! s:Install(flag)
  augroup TransparencyWindows
    autocmd!
    if a:flag =~# '^\(1\|[tT]rue\|[yY]es\)$'
      autocmd FocusGained * call s:Transparency(g:vimtweak_focus_transparency_gained_value)
      autocmd FocusLost * call s:Transparency(50)
    endif
  augroup END
endfunction

command! -nargs=1 Transparency call <SID>Install(<f-args>)

Transparency Yes
